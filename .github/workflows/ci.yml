name: üß™ CI/CD for Meteoprog Weather Informers

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  PLUGIN_NAME: meteoprog-weather-informers
  UID: 1001
  GID: 1001
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1

jobs:
  # 1Ô∏è‚É£ Generate translation template (POT file)
  i18n:
    name: üåê Generate POT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make i18n-pot
      - uses: actions/upload-artifact@v4
        with:
          name: pot-file
          path: languages/*.pot

  # 2Ô∏è‚É£ Main PHP + WordPress tests
  tests:
    name: ‚úÖ Tests Matrix
    runs-on: ubuntu-latest
    needs: i18n

    services:
      db:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: wordpress_test_suite
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -prootpass"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10

    strategy:
      fail-fast: false
      matrix:
        include:
          - { php: "5.6", wp: "4.9",   target: "php56-wp49" }
          - { php: "7.4", wp: "5.8",   target: "php74-wp58" }
          - { php: "8.1", wp: "6.8.3", target: "php81-wp683" }
          - { php: "8.3", wp: "6.8.3", target: "php83-wp683" }
          - { php: "8.4", wp: "6.8.3", target: "php84-wp683" }

    env:
      DB_HOST: 127.0.0.1
      DB_USER: root
      DB_PASS: rootpass
      DB_NAME: wordpress_test_suite

    steps:
      - uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Wait for DB ready
        run: |
          for i in $(seq 1 30); do
            mysqladmin ping -h 127.0.0.1 -prootpass > /dev/null 2>&1 && break
            sleep 2
          done

      - name: Prepare PHP version string
        run: echo "PHP_VER=$(echo '${{ matrix.php }}' | tr -d '.')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - name: Build Docker image PHP ${{ matrix.php }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.php${{ env.PHP_VER }}
          tags: custom-php${{ env.PHP_VER }}:latest
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests (WP ${{ matrix.wp }})
        run: make ${{ matrix.target }}

  # 3Ô∏è‚É£ Code style check (WordPress Coding Standards)
  phpcs:
    name: üßπ PHPCS (WordPress Coding Standards)
    runs-on: ubuntu-latest
    needs: i18n
    steps:
      - uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Run PHPCS check
        run: make phpcs-check

      - uses: actions/upload-artifact@v4
        with:
          name: phpcs-report
          path: phpcs-report.xml
          if-no-files-found: ignore

  # 4Ô∏è‚É£ Nightly builds ‚Äî non-blocking optional job
  nightly:
    name: üåô PHP 8.3 / 8.4 Nightly (Optional)
    runs-on: ubuntu-latest
    needs: i18n
    continue-on-error: true
    if: ${{ github.event_name != 'pull_request' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { php: "8.3", target: "php83-nightly" }
          - { php: "8.4", target: "php84-nightly" }

    services:
      db:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: wordpress_test_suite
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -prootpass"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Wait for DB ready
        run: |
          for i in $(seq 1 30); do
            mysql -h 127.0.0.1 -uroot -prootpass -e "SELECT 1" >/dev/null 2>&1 && break
            sleep 2
          done

      - name: Prepare PHP version string
        run: echo "PHP_VER=$(echo '${{ matrix.php }}' | tr -d '.')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - name: Build Docker image PHP ${{ matrix.php }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.php${{ env.PHP_VER }}
          tags: custom-php${{ env.PHP_VER }}:latest
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Nightly tests (PHP ${{ matrix.php }})
        run: make ${{ matrix.target }}

  # 5Ô∏è‚É£ Release build (triggered by tag v*)
  release:
    name: üöÄ Build & Publish Release ZIP
    runs-on: ubuntu-latest
    needs: [tests, phpcs]
    if: startsWith(github.ref, 'refs/tags/v') && (github.event.pull_request.head.repo.fork == false)

    steps:
      - uses: actions/checkout@v4

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Regenerate POT file
        run: make i18n-pot

      - name: Check version matches tag
        run: |
          set -e
          [ ! -f meteoprog-weather-informers.php ] && { echo "::error::File meteoprog-weather-informers.php not found"; exit 1; }
          TAG="${GITHUB_REF#refs/tags/}"
          VER=$(grep -E '^\s*\* Version:' meteoprog-weather-informers.php | sed -E 's/^\s*\* Version:[[:space:]]*//')
          if [ -z "$VER" ]; then
            echo "::error::Version not found in plugin header"
            exit 1
          fi
          if [ "v${VER}" != "${TAG}" ]; then
            echo "::error::Version mismatch: plugin=${VER}, tag=${TAG}"
            exit 1
          fi
          echo "::notice::Version OK: ${VER}"

      - name: Build dist ZIP
        run: make dist-docker

      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
