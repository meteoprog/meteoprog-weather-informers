name: 🧪 CI/CD for Meteoprog Weather Informers

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # every day at 03:00 UTC

permissions:
  contents: write

concurrency:
  group: meteoprog-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PLUGIN_NAME: meteoprog-weather-informers
  UID: 1001
  GID: 1001
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1

jobs:
  # 🌐 POT file generation
  i18n:
    name: 🌐 POT
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: 🏗 Generate POT
        run: |
          echo "::group::🌐 Generate translation POT file"
          make i18n-pot
          echo "::endgroup::"
      - uses: actions/upload-artifact@v4
        with:
          name: pot-file
          path: languages/*.pot

  # ✅ PHP + WordPress matrix tests
  tests:
    name: ✅ PHP ${{ matrix.php }} / WP ${{ matrix.wp }}
    runs-on: ubuntu-latest
    needs: i18n
    timeout-minutes: 10

    services:
      db:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: wordpress_test_suite
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -prootpass"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10

    strategy:
      fail-fast: false
      matrix:
        include:
          - { php: "5.6", wp: "4.9",   target: "php56-wp49" }
          - { php: "7.4", wp: "5.8",   target: "php74-wp58" }
          - { php: "8.1", wp: "6.8.3", target: "php81-wp683" }
          - { php: "8.3", wp: "6.8.3", target: "php83-wp683" }
          - { php: "8.4", wp: "6.8.3", target: "php84-wp683" }

    env:
      DB_HOST: 127.0.0.1
      DB_USER: root
      DB_PASS: rootpass
      DB_NAME: wordpress_test_suite

    steps:
      - uses: actions/checkout@v4
      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-
      - name: 🕐 Wait for DB ready
        run: |
          for i in $(seq 1 30); do
            mysqladmin ping -h 127.0.0.1 -prootpass > /dev/null 2>&1 && break
            sleep 2
          done
      - name: 🧩 Ensure Docker network exists
        run: |
          docker network inspect meteoprog-weather-informers-network >/dev/null 2>&1 || \
          docker network create meteoprog-weather-informers-network
      - name: 🧱 Prepare PHP version string
        run: echo "PHP_VER=$(echo '${{ matrix.php }}' | tr -d '.')" >> $GITHUB_ENV
      - name: 🛠 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest
      - name: 🧱 Build Docker image (PHP ${{ matrix.php }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.php${{ env.PHP_VER }}
          tags: custom-php${{ env.PHP_VER }}:latest
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: 🧪 Run tests (WP ${{ matrix.wp }})
        run: |
          echo "::group::🧪 Tests for PHP ${{ matrix.php }} / WP ${{ matrix.wp }}"
          make ${{ matrix.target }}
          echo "::endgroup::"

  # 🧹 PHPCS / WordPress Coding Standards
  phpcs:
    name: 🧹 WPCS
    runs-on: ubuntu-latest
    needs: i18n
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-
      - name: 🧹 Run PHPCS check
        run: |
          echo "::group::🧹 Running PHPCS"
          make phpcs-check
          echo "::endgroup::"
      - uses: actions/upload-artifact@v4
        with:
          name: phpcs-report
          path: phpcs-report.xml
          if-no-files-found: ignore

  plugin-check:
    name: 🧩 Plugin Check
    runs-on: ubuntu-latest
    needs: [i18n]
    timeout-minutes: 10
    outputs:
      PLUGIN_CHECK_STATUS: ${{ steps.set-status.outputs.status }}

    steps:
      - uses: actions/checkout@v4

      - name: 🧱 Build + Run Plugin Check
        id: run-check
        shell: bash
        continue-on-error: true
        run: |
          set -o pipefail
          make test-plugin-check | tee plugin-check.log
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV

      - name: 🪣 Set output status
        id: set-status
        run: echo "status=${EXIT_CODE:-1}" >> "$GITHUB_OUTPUT"

      - name: 📦 Upload Plugin Check log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plugin-check-report
          path: plugin-check.log
          if-no-files-found: warn

  plugin-check-status:
    name: 🧩 Plugin Check Result
    runs-on: ubuntu-latest
    needs: plugin-check
    if: always()
    steps:
      - name: Evaluate Plugin Check outcome
        run: |
          STATUS=${{ needs.plugin-check.outputs.PLUGIN_CHECK_STATUS }}
          echo "Plugin Check status: $STATUS"
          if [ "$STATUS" = "0" ]; then
            echo "✅ Plugin Check passed"
          elif [ -z "$STATUS" ]; then
            echo "::warning::No status received from plugin-check job (possibly output mapping issue)"
          else
            echo "::error::Plugin Check failed (status=$STATUS)"
            exit 1
          fi


  # 🌙 Nightly + Latest builds (daily + push-triggered)
  nightly:
    name: 🌙 Nightly PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    needs: i18n
    continue-on-error: true
    timeout-minutes: 15
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { php: "8.3", target: "php83-latest" }   # ✅ latest WP build
          - { php: "8.3", target: "php83-nightly" }  # ✅ nightly WP build
          - { php: "8.4", target: "php84-nightly" }  # ✅ nightly WP build

    services:
      db:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: wordpress_test_suite
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -prootpass"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Ensure jq installed
        run: sudo apt-get update && sudo apt-get install -y jq

      # 🔖 Fetch latest release tag for scheduled runs
      - name: 🔖 Get latest release tag (native GitHub API)
        id: latest
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "::group::🔖 Fetching latest release tag"
          TAG=$(curl -s https://api.github.com/repos/meteoprog/meteoprog-weather-informers/releases/latest | jq -r .tag_name)
          if [ "$TAG" = "null" ] || [ -z "$TAG" ]; then
            echo "::error::Failed to fetch latest release tag."
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Latest release tag: $TAG"
          echo "::endgroup::"

      - name: 🧩 Checkout latest release tag (scheduled only)
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git fetch --tags
          git checkout ${{ steps.latest.outputs.tag }}

      - name: 🕐 Wait for DB ready
        run: |
          for i in $(seq 1 30); do
            mysql -h 127.0.0.1 -uroot -prootpass -e "SELECT 1" >/dev/null 2>&1 && break
            sleep 2
          done

      - name: 🧩 Ensure Docker network exists
        run: |
          docker network inspect meteoprog-weather-informers-network >/dev/null 2>&1 || \
          docker network create meteoprog-weather-informers-network

      - name: 🧱 Prepare PHP version string
        run: echo "PHP_VER=$(echo '${{ matrix.php }}' | tr -d '.')" >> $GITHUB_ENV

      - name: 🛠 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - name: 🧱 Build Docker image (PHP ${{ matrix.php }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.php${{ env.PHP_VER }}
          tags: custom-php${{ env.PHP_VER }}:latest
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🌙 Run Nightly/Latest tests
        run: |
          echo "::group::🌙 Nightly or Latest PHP ${{ matrix.php }} - $(date -u '+%Y-%m-%d %H:%M UTC')"
          make ${{ matrix.target }}
          echo "::endgroup::"

  # 🚀 Release build (on tags)
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [tests, phpcs]
    if: startsWith(github.ref, 'refs/tags/v') && (github.event.pull_request.head.repo.fork == false)
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-
      - name: 🌐 Regenerate POT file
        run: make i18n-pot
      - name: 🔍 Check version matches tag
        run: |
          set -e
          [ ! -f meteoprog-weather-informers.php ] && { echo "::error::File meteoprog-weather-informers.php not found"; exit 1; }
          TAG="${GITHUB_REF#refs/tags/}"
          VER=$(grep -E '^\s*\* Version:' meteoprog-weather-informers.php | sed -E 's/^\s*\* Version:[[:space:]]*//')
          if [ -z "$VER" ]; then
            echo "::error::Version not found in plugin header"; exit 1
          fi
          if [ "v${VER}" != "${TAG}" ]; then
            echo "::error::Version mismatch: plugin=${VER}, tag=${TAG}"; exit 1
          fi
          echo "::notice::Version OK: ${VER}"
      - name: 📦 Build dist ZIP
        run: make dist-docker
      - name: 🚀 Upload release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📊 Summary
  summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [tests, phpcs, nightly, plugin-check, plugin-check-status]
    if: always()
    steps:
      - name: 🧾 Generate summary
        run: |
          echo "## ✅ CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Plugin:** Meteoprog Weather Informers" >> $GITHUB_STEP_SUMMARY
          echo "**PHP versions:** 5.6 / 7.4 / 8.1 / 8.3 / 8.4" >> $GITHUB_STEP_SUMMARY
          echo "**WordPress versions:** 4.9 / 5.8 / 6.8.3" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.tests.result }}" = "success" ]; then
            echo "🧪 Tests: all passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "🧪 Tests: ❌ failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.phpcs.result }}" = "success" ]; then
            echo "🧹 WPCS: no violations" >> $GITHUB_STEP_SUMMARY
          else
            echo "🧹 WPCS: ❌ style issues detected" >> $GITHUB_STEP_SUMMARY
          fi

          # 🧩 Plugin Check
          STATUS="${{ needs.plugin-check.outputs.PLUGIN_CHECK_STATUS }}"
          if [ "${{ needs.plugin-check-status.result }}" = "success" ]; then
            echo "🧩 Plugin Check: ✅ passed (status=$STATUS)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🧩 Plugin Check: ❌ failed (status=$STATUS) — [View log ↗](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.nightly.result }}" = "success" ]; then
            echo "🌙 Nightly & Latest builds: ✅ success (non-blocking)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🌙 Nightly & Latest builds: ⚠️ failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 CI completed on \`$(date -u '+%Y-%m-%d %H:%M UTC')\`" >> $GITHUB_STEP_SUMMARY
