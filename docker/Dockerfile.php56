FROM php:5.6-fpm-alpine

ENV DEBIAN_FRONTEND=noninteractive

ARG CACHEBUST=0

ARG UID=1000
ARG GID=1000

# Install basic utilities, DNS tools, and PHP extensions
RUN set -eux; \
    echo "[Build] Installing base packages and PHP extensions..."; \
    apk add --no-cache \
        bash \
        curl \
        openssl \
        ca-certificates \
        git \
        unzip \
        zip \
        libzip-dev \
        subversion \
        sudo \
        tree \
        gettext \
        icu-dev \
        bind-tools \
        openssh-client \
        mariadb-client \
        $PHPIZE_DEPS && \
        update-ca-certificates && \
        docker-php-ext-install mysqli pdo_mysql zip

# Workaround for Alpine DNS issues during build (raw.githubusercontent.com, wordpress.org, getcomposer.org, wp-cli.org repo.packagist.org)
RUN echo "[Build] Checking DNS resolution... (cachebust=$CACHEBUST)" \
 && for host in raw.githubusercontent.com github.com wordpress.org getcomposer.org wp-cli.org repo.packagist.org; do \
      echo "[DNS] Checking $host..."; \
      if ! nslookup $host > /dev/null 2>&1; then \
        echo "ERROR: DNS resolution failed for $host (Alpine DNS bug). Check your Docker network or /etc/resolv.conf"; \
        exit 1; \
      fi; \
    done

RUN echo "date.timezone = UTC" > /usr/local/etc/php/conf.d/timezone.ini

# Create non-root user with matching UID/GID (safe for macOS, Linux, CI)
RUN set -eux; \
    # --- Check or create group ---
    if getent group "${GID}" >/dev/null 2>&1; then \
        groupname="$(getent group "${GID}" | cut -d: -f1)"; \
        echo "[Docker] Using existing group ${GID} (${groupname})"; \
    else \
        addgroup -g "${GID}" user; \
        groupname="user"; \
        echo "[Docker] Created new group ${groupname} (${GID})"; \
    fi; \
    # --- Check or create user ---
    if getent passwd "${UID}" >/dev/null 2>&1; then \
        username="$(getent passwd "${UID}" | cut -d: -f1)"; \
        echo "[Docker] Using existing user ${UID} (${username})"; \
    else \
        adduser -D -u "${UID}" -G "${groupname}" user; \
        username="user"; \
        echo "[Docker] Created new user ${username} (${UID}:${GID})"; \
    fi; \
    # --- Add to wheel if exists ---
    if getent group wheel >/dev/null 2>&1; then \
        adduser "${username}" wheel || true; \
    fi; \
    echo "[Docker] ✅ User ${username} (${UID}:${GID}) ready"

# Install Composer 2.2 LTS (supports PHP 5.3–8.2)
RUN curl -sS https://getcomposer.org/installer | php \
    -- --install-dir=/usr/local/bin --filename=composer --version=2.2.22 \
    && chmod +x /usr/local/bin/composer

# Install WP-CLI
RUN curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
    && chmod +x /usr/local/bin/wp

# Install PHPUnit 5.7 (the last version compatible with PHP 5.6)
RUN curl -Ls https://phar.phpunit.de/phpunit-5.7.phar -o /usr/local/bin/phpunit \
    && chmod +x /usr/local/bin/phpunit

# Install WP test framework installer (pinned to v2.1.1 for legacy WP versions)
RUN curl -o /usr/local/bin/install-wp-tests.sh \
    https://raw.githubusercontent.com/wp-cli/scaffold-command/v2.1.1/templates/install-wp-tests.sh \
    && chmod +x /usr/local/bin/install-wp-tests.sh

# Run basic version checks under the non-root user
USER user
RUN composer --version && wp --version && phpunit --version

USER root
